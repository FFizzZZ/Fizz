class Solution:
    def longestPalindrome(self, s: 'str') -> 'str':
        if not s: return ''
        longest = ''
        for i in range(len(s)):
            sub = self.expand(s, i, i)
            if len(sub) > len(longest):
                longest = sub
            sub = self.expand(s, i, i+1)
            if len(sub) > len(longest):
                longest = sub
        return longest
                
    def expand(self, string, left, right):
        n = len(string)
        while left >= 0 and right < n and string[left] == string[right]:
            left -= 1
            right += 1
        return string[left+1:right]


# Manacherâ€™s Algorithm
class Solution:
    def longestPalindrome(self, s: 'str') -> 'str':
        if not s: return ''
        
        string = ['#']
        for i in s:
            string.append(i)
            string.append('#')
        n = len(string)
        P = [0] * n
        P[1] = 1
        c, r = 1, 2
        for i in range(2, n):
            i1 = 2 * c - i
            if P[i1] < r - i:
                P[i] = P[i1]
            else:
                length = r - i
                P[i] = length
                u = i + length + 1
                l = i - length - 1
                while u <= n-1 and l >= 0:
                    if string[l] == string[u]:
                        P[i] += 1
                        u += 1
                        l -= 1
                    else: break
                c = i
                r = u - 1
        index = P.index(max(P))
        l = (index - P[index]) // 2
        u = (index + P[index] - 2) // 2
        res = s[l : u + 1]
        return res
