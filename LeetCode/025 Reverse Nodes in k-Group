# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseKGroup(self, head: 'ListNode', k: 'int') -> 'ListNode':
        dummy = jump = ListNode(0)
        dummy.next = l = r = head

        while True:
            count = 0
            while r and count < k:   # use r to locate the range
                r = r.next
                count += 1
            if count == k:  # if size k satisfied, reverse the inner linked list
                pre, cur = r, l
                for _ in range(k):
                    cur.next, cur, pre = pre, cur.next, cur  # standard reversing
                jump.next, jump, l = pre, l, r  # connect two k-groups
            else:
                return dummy.next
                
                
                
###
def reverseKGroup(self, head, k):
    if head is None or k < 2:
        return head
    
    ret = head
    for i in range(k - 1):
        ret = ret.next
        if ret is None:
            return head
            
    prev, current = None, head
    for i in range(k):
        _next = current.next
        current.next = prev
        prev = current
        current = _next
        
    head.next = self.reverseKGroup(current, k)
    
    return ret  
