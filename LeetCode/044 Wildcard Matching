class Solution:
    def isMatch(self, s, p):
        if len(s) < len(p) - p.count('*'): return False
        dp = {}
        def f(i, j):
            if j == len(p):
                return i == len(s)
            if i == len(s):
                return p[j] == '*' and f(i, j+1)
            if (i, j) in dp:
                return dp[(i,j)]
            first_match = i < len(s) and p[j] in ['?', s[i]]
            if p[j] == '*':
                res = f(i+1, j) or f(i, j+1)
            else:
                res = first_match and f(i+1, j+1)
            dp[(i, j)] = res
            return res
        return f(0, 0)
                
------------------------------------
# 99%, fast
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        i = 0
        j = 0
        star = -1
        s_star = 0
        s_len = len(s)
        p_len = len(p)
        while i < s_len:
            if i < s_len and j < p_len and (s[i] == p[j] or p[j] == '?'):
                i += 1
                j += 1
            elif j < p_len and p[j] == '*':
                star = j
                s_star = i
                j += 1
            elif star != -1:
                j = star + 1
                s_star += 1
                i = s_star
            else:
                return False
        while j < p_len and p[j] == '*':
            j += 1
        return j == p_len

# Finite-state machine
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        transfer = {}
        state = 0
        
        for char in p:
            if char == '*':
                transfer[state, char] = state
            else:
                transfer[state, char] = state + 1
                state += 1
        
        accept = state
        state = set([0])
        
        for char in s:
            state = set([transfer.get((at, token)) for at in state for token in [char, '*', '?']])
        
        return accept in state

