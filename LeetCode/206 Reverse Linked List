class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head: return None
        if not head.next: return head
        node = ListNode(0)
        node.next = head
        tail = node
        tail = tail.next
        while tail.next:
            temp = node.next
            node.next = tail.next
            tail.next = tail.next.next
            node.next.next = temp
        return node.next

class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        stack = [None]
        while head:
            stack.append(head)
            head = head.next
        for i in reversed(range(1, len(stack))):
            stack[i].next = stack[i-1]
        return stack[-1]

        
-----------------------------------------------------
 
# Iterative
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre = None
        cur = head
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp
        return pre
        
# Recursive
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        p = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return p
