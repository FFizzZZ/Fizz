```
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head: return None
        if not head.next: return head
        node = ListNode(0)
        node.next = head
        tail = node
        tail = tail.next
        while tail.next:
            temp = node.next
            node.next = tail.next
            tail.next = tail.next.next
            node.next.next = temp
        return node.next
```

```
Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?
```
        
-----------------------------------------------------
 
# Iterative
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre = None
        cur = head
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp
        return pre
        
# Recursive
