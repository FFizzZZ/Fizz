# First we will add an auxiliary "dummy" node, which points to the list head. The "dummy" node is used to simplify some 
# corner cases such as a list with only one node, or removing the head of the list.
class Solution:
    def removeNthFromEnd(self, head: 'ListNode', n: 'int') -> 'ListNode':
        num = 1
        dummy = ListNode(0)
        dummy.next = head
        t = head
        while t.next:
            t = t.next
            num += 1
        num += 1
        t = dummy
        for i in range(num - n - 1):
            t = t.next
        temp = t.next.next
        t.next = temp
        return dummy.next
        
        
# One pass algorithm
# Maintaining n nodes apart between first and second pointer
class Solution:
    def removeNthFromEnd(self, head: 'ListNode', n: 'int') -> 'ListNode':
        dummy = ListNode(0)
        dummy.next = head
        first = dummy
        second = dummy
        # Advances first pointer so that the gap between first and second is n nodes apart
        for i in range(n+1):
            first = first.next
        while first:
            first = first.next
            second = second.next
        second.next = second.next.next
        return dummy.next
        
