# slow
class Solution:
    def numTrees(self, n: int) -> int:
        memo = {}
        if n == 0: return 0
        def f(start, end):
            if (start, end) in memo:
                return memo[(start, end)]
            if start >= end : return 1
            count = 0
            for i in range(start, end+1):
                left, right = f(start, i-1), f(i+1, end)
                count += left * right
            memo[(start, end)] = count
            return count
        return f(1, n)
        
-------------------------------------------------------------

# DP
class Solution:
    def numTrees1(self, n):
        res = [0] * (n+1)
        res[0] = 1
        for i in range(1, n+1):
            for j in xrange(i):
                res[i] += res[j] * res[i-1-j]
        return res[n]


# Catalan Number  (2n)!/((n+1)!*n!) 
https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0
class Solution:
    def numTrees(self, n):
        return math.factorial(2*n)/(math.factorial(n)*math.factorial(n+1))


