class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res = []
        def f(path, remain):
            if not remain:
                res.append(path)
                return
            for i in range(len(remain)):
                l = len(path)
                t = remain[i]
                flag = 1
                for j in range(l):
                    if path[~j] in (t+j+1, t-j-1):
                        flag = 0
                        break
                if flag:
                    f(path+[t], remain[:i] + remain[i+1:])
        f([], [i for i in range(n)])
        ans = []
        for i in res:
            temp = []
            for j in i:
                t = ['.'] * n
                t[j] = 'Q'
                temp.append(''.join(t))
            ans.append(temp)
        return ans
--------------------------------------------

class Solution:
    def solveNQueens(self, n):
        """
        :param n: 
        :return: 
        """
        res = []
        def dfs(queens, ddiff, ssum):
            p = len(queens)
            if p == n:
                queens = ['.' * i + 'Q' + '.' * (n - 1 - i) for i in queens]
                res.append(queens)
                return
            for q in range(n):
                if q in queens or p - q in ddiff or p + q in ssum: continue
                dfs(queens + [q],
                    ddiff + [p - q],
                    ssum + [p + q])
        dfs([], [], [])
        return res
                
            
            
